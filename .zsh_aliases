## For better colors
if [ -x "$(command -v eza)" ] ; then
	alias ll="eza -algF"
	alias la="eza"
	alias ls="eza"
	alias l="eza -F"
fi

## Prompt before overwriting files
alias mv="mv -i"
alias rm="rm -i"

## git aliases
alias gs="git status"
alias gl="git log --all --decorate --oneline --graph"

MY_WORKSPACE="/Users/arman/code/github/onlywicked"
alias mine="cd $MY_WORKSPACE"

WORKSPACE="/Users/arman/code/"
OFFICE_WORKSPACE="/Users/arman/code/github/midaslabs"

alias office="cd $OFFICE_WORKSPACE"
alias mybeacon="cd $WORKSPACE/github/mybeacon"

function protogen() {
	protoc -I="$OFFICE_WORKSPACE/proto-repo/v1" -I="$OFFICE_WORKSPACE/ship" --go-grpc_out=$2 --go_out=$2 --ship_out=$2 --graphql_out=field_camel:$2 $1
}

function protoship() {
	protoc -I="$OFFICE_WORKSPACE/proto-repo/v1" -I="$OFFICE_WORKSPACE/ship" --go-grpc_out=$2 --go_out=$2 --ship_out=$2 $1
}

function protoraw() {
	protoc -I="$OFFICE_WORKSPACE/proto-repo/v1" --go_out=paths=source_relative:$2 $1
}

alias play="mpv --autofit-larger=100% --geometry=1080-2-2"

CLOUD_SQL_PROXY_BIN="cloud_sql_proxy"

alias proxy_prod_db="$CLOUD_SQL_PROXY_BIN -enable_iam_login -instances=flahmingo-prod-357017:northamerica-northeast1:flahmingo-prod-357017-pg14=tcp:3331 -dir /tmp"
alias proxy_dev_db="$CLOUD_SQL_PROXY_BIN -enable_iam_login -instances=development-flahmingo:northamerica-northeast1:flahmingo-dev-14=tcp:3332 -dir /tmp"
alias proxy_close_db="$CLOUD_SQL_PROXY_BIN -enable_iam_login -instances=flahmingo-closed-beta:northamerica-northeast1:flahmingo-closed-beta-pg14=tcp:3334 -dir /tmp"

# CLOUD_SQL_PROXY_BIN="cloud-sql-proxy"

# alias proxy_prod_db="$CLOUD_SQL_PROXY_BIN -g -i flahmingo-prod-357017:northamerica-northeast1:flahmingo-prod-357017-pg14 -p 3331"
# alias proxy_dev_db="$CLOUD_SQL_PROXY_BIN -g -i development-flahmingo:northamerica-northeast1:flahmingo-dev-14 -p 3332"
# alias proxy_staging_db="$CLOUD_SQL_PROXY_BIN -g -i flahmingo-preprod:northamerica-northeast1:flahmingo-preprod-primary-db-14 -p 3333"
# alias proxy_close_db="$CLOUD_SQL_PROXY_BIN -g -i flahmingo-closed-beta:northamerica-northeast1:flahmingo-closed-beta-pg14 -p 3334"
# alias proxy_terraform_db="$CLOUD_SQL_PROXY_BIN -g -i flahmingo-terraform-dev-352001:northamerica-northeast1:flahmingo-terraform-dev-352001-pg14 -p 3335"

alias list_used_port="sudo lsof -i TCP -s TCP:LISTEN -P -n"

alias activate_gconfig="gcloud config configurations activate"

function tunnel_cloud_sql() {
	$CLOUD_SQL_PROXY_BIN -enable_iam_login -instances=$1=tcp:$2 -dir /tmp
}

export AWS_PROFILE=mybeacon-lower

function aws_ctx() {
  export AWS_PROFILE="$(aws configure list-profiles | fzf)"
  echo "Switched to profile ""$AWS_PROFILE""."
}


ssh_dev_ssm() {
    INSTANCE_ID=$(aws ec2 describe-instances --filter Name=tag:Name,Values=beacon-development-ssm Name=instance-state-name,Values=running --query "Reservations[0].Instances[0].InstanceId" --output text)
    echo "SSHing to Jump Box: $INSTANCE_ID"
    aws ssm start-session --target $INSTANCE_ID --document-name "AWS-StartSSHSession"
}

proxy_aws_dev_tunnel() {
    INSTANCE_ID=$(aws ec2 describe-instances --filter Name=tag:Name,Values=beacon-development-ssm Name=instance-state-name,Values=running --query "Reservations[0].Instances[0].InstanceId" --output text)
    echo "Connecting to Jump Box: $INSTANCE_ID"
    aws ssm start-session --region ca-central-1 --document-name AWS-StartPortForwardingSessionToRemoteHost --parameters host="beacon-development-db.cluster-ci7km3zjdpfs.ca-central-1.rds.amazonaws.com",portNumber="5432",localPortNumber="5433" --target $INSTANCE_ID
}

get_aws_profile() {
  if [ "$1" = "dev" ]; then
    echo "mybeacon-lower"
  elif [ "$1" = "staging" ]; then
    echo "mybeacon-staging"
  elif [ "$1" = "prod" ]; then
    echo "mybeacon-production"
  fi
}

get_aws_tunnel_port() {
  if [ "$1" = "dev" ]; then
    echo "5433"
  elif [ "$1" = "staging" ]; then
    echo "5434"
  elif [ "$1" = "prod" ]; then
    echo "5432"
  fi
}


RDS_DEV_HOST=beacon-development-db.cluster-ci7km3zjdpfs.ca-central-1.rds.amazonaws.com
RDS_STAGING_HOST=beacon-staging-db.cluster-cefx3rdbbvls.ca-central-1.rds.amazonaws.com
RDS_PRODUCTION_HOST=beacon-production-db.cluster-cn0g0icuouwa.ca-central-1.rds.amazonaws.com

get_aws_rds_host() {
  if [ "$1" = "dev" ]; then
    echo $RDS_DEV_HOST
  elif [ "$1" = "staging" ]; then
    echo $RDS_STAGING_HOST
  elif [ "$1" = "prod" ]; then
    echo $RDS_PRODUCTION_HOST
  fi
}

get_aws_instance_id() {
  TAG_NAME=development
  if [ "$1" = "dev" ]; then
    TAG_NAME=development
  elif [ "$1" = "staging" ]; then
    TAG_NAME=staging
  elif [ "$1" = "prod" ]; then
    TAG_NAME=production
  fi

  AWS_PROFILE=$(get_aws_profile $1)

  INSTANCE_ID=$(AWS_PROFILE=$AWS_PROFILE aws ec2 describe-instances --filter Name=tag:Name,Values=beacon-$TAG_NAME-ssm Name=instance-state-name,Values=running --query "Reservations[0].Instances[0].InstanceId" --output text)

  echo $INSTANCE_ID
}

proxy_ecs_app() {
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
    echo "Usage: proxy_ecs_app <environment> <host:port> <proxy_port>"
    echo "Example: proxy_ecs_app dev profile.apps.beacon.internal:8080 8081"
    return
  fi

  TAG_NAME=development
  if [ "$1" = "dev" ]; then
    TAG_NAME=development
  elif [ "$1" = "staging" ]; then
    TAG_NAME=staging
  elif [ "$1" = "prod" ]; then
    TAG_NAME=production
  fi

  AWS_PROFILE=$(get_aws_profile $1)
  ADDR=$2

  # Split the address into host and port

  HOST=$(echo "$ADDR" | cut -d':' -f1)
  PORT=$(echo "$ADDR" | cut -d':' -f2)


  INSTANCE_ID=$(get_aws_instance_id $1)

  PROXY_PORT=$3

  echo "Tunneling ${HOST}:${PORT} ($TAG_NAME) to ${PROXY_PORT}: $INSTANCE_ID"

  AWS_PROFILE=$AWS_PROFILE aws ssm start-session --region ca-central-1 --document-name AWS-StartPortForwardingSessionToRemoteHost --parameters host="$HOST",portNumber="$PORT",localPortNumber="$PROXY_PORT" --target $INSTANCE_ID
}

proxy_aws_tunnel() {
  TAG_NAME=development
  if [ "$1" = "dev" ]; then
    TAG_NAME=development
  elif [ "$1" = "staging" ]; then
    TAG_NAME=staging
  elif [ "$1" = "prod" ]; then
    TAG_NAME=production
  fi

  AWS_PROFILE=$(get_aws_profile $1)
  PORT=$(get_aws_tunnel_port $1)
  HOST=$(get_aws_rds_host $1)


  INSTANCE_ID=$(get_aws_instance_id $1)

  echo "Connecting to Jump Box ($TAG_NAME): $INSTANCE_ID"

  AWS_PROFILE=$AWS_PROFILE aws ssm start-session --region ca-central-1 --document-name AWS-StartPortForwardingSessionToRemoteHost --parameters host="$HOST",portNumber="5432",localPortNumber="$PORT" --target $INSTANCE_ID
}


aws_pg_pass() {
  aws rds generate-db-auth-token --region ca-central-1 --hostname beacon-development-db.cluster-ci7km3zjdpfs.ca-central-1.rds.amazonaws.com --port 5432 --username arman@mybeacon.ca
}

aws_container_logs() {
  AWS_PROFILE=$(get_aws_profile $1)

  GROUP_NAME=beacon-development-fargate
  if [ -n "$1" ] && [ "$1" = "dev" ]; then
    GROUP_NAME=beacon-development-fargate
  elif [ -n "$1" ] && [ "$1" = "prod" ]; then
    GROUP_NAME=beacon-production-fargate
  elif [ -n "$1" ] && [ "$1" = "staging" ]; then
    GROUP_NAME=beacon-staging-fargate
  fi

  AWS_PROFILE=$AWS_PROFILE aws logs tail --follow --since 2m --format short  $GROUP_NAME/$2
}

BEACON_EMAIL=arman@mybeacon.ca

get_aws_ssm_session() {
  INSTANCE_ID=$(get_aws_instance_id $1)
  AWS_PROFILE=$(get_aws_profile $1)

  SESSION_ID=$(AWS_PROFILE=$AWS_PROFILE aws ssm describe-sessions --state Active --filters key=Target,value=$INSTANCE_ID --query 'Sessions[0].SessionId' --output text)

  echo $SESSION_ID
}


generate_aws_rds_auth_token() {
  if [ -z "$1" ] || [ -z "$2"] ]; then
    echo "Usage: generate_aws_rds_auth_token <environment> <username>"
    echo "Example: generate_aws_rds_auth_token dev arman@mybeacon.ca"

    return
  fi

  HOST=$(get_aws_rds_host $1)

  AWS_PROFILE=$(get_aws_profile $1)

  AWS_PROFILE=$AWS_PROFILE aws rds generate-db-auth-token --hostname $HOST --port 5432 --username $2
}

login_rds() {
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
    echo "Usage: login_rds <environment> <username> <database>"
    echo "Example: login_rds dev arman@mybeacon.ca beacon"
    return
  fi

  HOST=$(get_aws_rds_host $1)
  PORT=$(get_aws_tunnel_port $1)
  AWS_PROFILE=$(get_aws_profile $1)

  echo "Starting tunnel"

  proxy_aws_tunnel $1 &
  pid=$!

  sleep 10

  echo "Connecting to $HOST:$PORT"

  PGPASSWORD=$(AWS_PROFILE=$AWS_PROFILE aws rds generate-db-auth-token --hostname $HOST --port 5432 --username $2)

  PGPASSWORD=$PGPASSWORD PGROOT=/Users/arman/.postgresql/root.crt pgcli -h 127.0.0.1 -p $PORT -U $2 -d $3

  echo "Closing tunnel"
  SESSION_ID=$(get_aws_ssm_session $1)
  # If the tunnel is still running, kill it by session id (not by pid). Session id could be "None" if the tunnel is already closed.
  # If the tunnel is already closed, kill it by pid.
  if [ "$SESSION_ID" != "None" ]; then
    AWS_PROFILE=$AWS_PROFILE aws ssm terminate-session --session-id "$SESSION_ID"
  else
    kill $pid
  fi
}

dump_rds() {
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
    echo "Usage: dump_rds <environment> <username> <database> <filename>"
    echo "Example: dump_rds dev arman@mybeacon.ca beacon filename.sql"
    return
  fi

  HOST=$(get_aws_rds_host $1)
  PORT=$(get_aws_tunnel_port $1)
  AWS_PROFILE=$(get_aws_profile $1)

  echo "Starting tunnel"

  proxy_aws_tunnel $1 &
  pid=$!

  sleep 10

  echo "Connecting to $HOST:$PORT"

  PGPASSWORD=$(AWS_PROFILE=$AWS_PROFILE aws rds generate-db-auth-token --hostname $HOST --port 5432 --username $2)

  PGPASSWORD=$PGPASSWORD PGROOT=/Users/arman/.postgresql/root.crt pg_dump -h 127.0.0.1 -p $PORT -U $2 -d $3 > $4

  echo "Closing tunnel"
  SESSION_ID=$(get_aws_ssm_session $1)
  # If the tunnel is still running, kill it by session id (not by pid). Session id could be "None" if the tunnel is already closed.
  # If the tunnel is already closed, kill it by pid.
  if [ "$SESSION_ID" != "None" ]; then
    AWS_PROFILE=$AWS_PROFILE aws ssm terminate-session --session-id "$SESSION_ID"
  else
    kill $pid
  fi
}


migrate_rds() {
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
    echo "Usage: migrate_rds <environment> <username> <database> <host>:<port>"
    echo "Example: migrate_rds dev arman@mybeacon.ca beacon localhost:5432"
    return
  fi

  env=$1
  # trim the username and url encode it
  username=$(echo $2 | tr -d '[:space:]' | jq -sRr @uri)
  database=$3
  host_port=$4

  HOST=$(get_aws_rds_host $1)
  PORT=$(get_aws_tunnel_port $1)
  AWS_PROFILE=$(get_aws_profile $1)

  PGPASSWORD=$(AWS_PROFILE=$AWS_PROFILE aws rds generate-db-auth-token --hostname $HOST --port 5432 --username $2)

  # url encode the password
  PGPASSWORD=$(echo $PGPASSWORD | tr -d '[:space:]' | jq -sRr @uri)

  POSTGRES_URL="postgres://$username:$PGPASSWORD@$host_port/$database"

  echo "Running pgroll with $POSTGRES_URL"

  pgroll --postgres-url $POSTGRES_URL ${@:5}
}
